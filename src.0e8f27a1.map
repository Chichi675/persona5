{"version":3,"sources":["lib/utils.ts","lib/box/BoxChar.ts","lib/box/BoxText.ts","web.ts","index.ts"],"names":[],"mappings":";AA6DA,aA7DA,SAAgB,EAAoB,EAAe,GACzC,IAAA,EAAS,SAAS,cAAc,UACtC,EAAO,MAAQ,EACf,EAAO,OAAS,EAEV,IAAA,EAAU,EAAO,WAAW,MAC9B,IAAC,EACK,MAAA,IAAI,MAAM,2BAEb,MAAA,CAAE,OAAM,EAAE,QAAO,GAG5B,SAAgB,EAAY,EAAc,EAAkB,EAA2B,QAA3B,IAAA,IAAA,EAAA,mBAA2B,IAAA,IAAA,EAAA,UAC3E,IAAA,EAAA,EAAA,EAAA,GAAA,QAEF,EAAU,EAAU,IAAI,EAAQ,MAAM,EAC5C,EAAI,KAAO,EACX,EAAI,aAAe,MACnB,EAAI,SAAS,EAAM,EAAG,GAOjB,IALD,IAAA,EAAQ,EACR,GAAQ,EAAG,EAAQ,EAAU,GAAO,EAAG,EAAS,EAC9C,EAAY,EAAI,aAAa,EAAG,EAAG,EAAU,GAAU,KAGpD,EAAI,EAAG,EAAI,GAAY,EAAQ,IAAK,EACpC,IAAA,IAAI,EAAI,EAAG,EAAI,GAAY,EAAQ,IAAK,EAAG,CACtC,IAAA,EAAgC,GAApB,EAAI,EAAW,GAC3B,EAAiC,GAApB,EAAI,EAAI,GACvB,EAAM,GAAK,EAAU,EAAW,KAChC,EAAM,IACJ,GAEF,EAAO,GAAK,EAAU,EAAY,KAClC,EAAO,IACL,GAEF,GAAU,GAAY,EAAU,EAAU,OAAS,EAAW,KAC9D,EAAS,EAAW,IAClB,GAEF,EAAU,EAAU,OAAS,EAAY,KACzC,EAAQ,EAAW,IACjB,GAMP,MAAA,CACH,IAAG,EACH,KAAI,EACJ,MAJU,EAAQ,EAKlB,OALiC,EAAS,GASlD,SAAgB,IACL,OAAA,KAAK,MAAsB,GAAhB,KAAK,UAAiB,EAAI,GAAK,EAGrD,SAAgB,EAAa,EAAmC,EAAe,EAAW,GACtF,EAAQ,UAAU,EAAG,GACrB,EAAQ,OAAO,KAAK,GAAK,EAAQ,KACjC,EAAQ,WAAW,GAAI,GAH3B,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA7DA,QAAA,oBAAA,EAYA,QAAA,YAAA,EA6CA,QAAA,SAAA,EAIA,QAAA,aAAA;;AC5CqB,aAAA,IAAA,EAAA,MAAA,KAAA,cAAA,SAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,OAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,EAAA,QAAA,EAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAjBrB,IAIY,EAMA,EAVZ,EAAA,EAAA,QAAA,aAEM,EAAY,IAElB,SAAY,GACR,EAAA,IAAA,UACA,EAAA,MAAA,UACA,EAAA,MAAA,UAHJ,CAAY,EAAA,QAAA,SAAA,QAAA,OAAM,KAMlB,SAAY,GACR,EAAA,EAAA,MAAA,GAAA,QACA,EAAA,EAAA,MAAA,GAAA,QACA,EAAA,EAAA,IAAA,GAAA,MACA,EAAA,EAAA,MAAA,GAAA,QAJJ,CAAY,EAAA,QAAA,YAAA,QAAA,UAAS,KAOrB,IAAA,EAAA,WAgBI,SAAA,EAAY,EAAc,EAAiB,EAAe,GAKlD,QALmC,IAAA,IAAA,EAAA,SAAe,IAAA,IAAA,EAAA,cAZ1D,KAAA,KAAO,GACP,KAAA,WAAa,GACb,KAAA,SAAW,EACX,KAAA,MAAQ,EACR,KAAA,OAAS,EACT,KAAA,KAAO,EACP,KAAA,IAAM,EACN,KAAA,MAAQ,EACR,KAAA,MAAQ,EACR,KAAA,KAAO,EAAU,MACjB,KAAA,MAAQ,EAAO,MAGN,KAAA,KAAO,EACP,KAAA,KAAO,EACP,KAAA,WAAa,EAEd,GAAQ,EAAU,MAAlB,CAIE,IAAA,GAAU,KAAK,MAAsB,GAAhB,KAAK,UAAiB,EAC7C,GAAQ,EAAU,OACb,KAAA,MAAQ,IACR,KAAA,MAAQ,IAER,KAAA,MAAQ,EAAI,KAAK,MAAsB,GAAhB,KAAK,UAAiB,EAAI,GACjD,KAAA,MAAQ,EAAQ,EAAE,YAEtB,KAAA,SAAW,EAAW,KAAK,MAE5B,GAAQ,EAAU,MACb,KAAA,MAAQ,EAAO,KAGlB,IAAA,EAAA,EAAA,YAAA,EAAA,KAAA,SAAA,KAAA,WAAA,QAAE,EAAA,EAAA,MAAO,EAAA,EAAA,OAAQ,EAAA,EAAA,IAAK,EAAA,EAAA,KACvB,KAAA,MAAQ,EACR,KAAA,OAAS,EACT,KAAA,IAAM,EACN,KAAA,KAAO,GA0BpB,OAvBI,OAAA,eAAI,EAAA,UAAA,OAAI,CAAR,IAAA,WACW,MAAA,QAAQ,KAAK,SAAQ,MAAM,KAAK,YADnC,YAAA,EA9CS,cAAA,IAkDjB,OAAA,eAAI,EAAA,UAAA,aAAU,CAAd,IAAA,WACU,IAAA,EAAQ,KAAK,MAAQ,KAAK,GAAK,IAC/B,EAAM,KAAK,IAAI,KAAK,IAAI,IAAS,EAAM,KAAK,IAAI,KAAK,IAAI,IAGxD,MAAA,CACH,MAHU,KAAK,KAAK,KAAK,MAAQ,GAAO,KAAK,KAAK,KAAK,OAAS,GAIhE,OAHW,KAAK,KAAK,KAAK,OAAS,GAAO,KAAK,KAAK,KAAK,MAAQ,KAJ3D,YAAA,EAlDG,cAAA,IA6DjB,OAAA,eAAI,EAAA,UAAA,aAAU,CAAd,IAAA,WACU,IAAA,EAAA,KAAA,WAAE,EAAA,EAAA,MAAO,EAAA,EAAA,OACT,EAAQ,KAAK,MAAQ,EAAU,MAAQ,EAAQ,YAAc,EAAQ,gBACpE,MAAA,CACH,MAAO,EAAQ,EACf,OAAQ,EAAS,IALX,YAAA,EA7DG,cAAA,IACV,EAAA,YAAc,IACd,EAAA,gBAAkB,IAmE7B,EArEA,GAAqB,QAAA,QAAA;;ACPrB,aAAA,IAAA,EAAA,MAAA,KAAA,UAAA,SAAA,GAAA,IAAA,EAAA,mBAAA,QAAA,EAAA,OAAA,UAAA,EAAA,EAAA,OAAA,EAAA,EAAA,KAAA,GAAA,CAAA,KAAA,WAAA,OAAA,GAAA,GAAA,EAAA,SAAA,OAAA,GAAA,CAAA,MAAA,GAAA,EAAA,KAAA,MAAA,MAAA,EAAA,MAAA,KAAA,QAAA,SAAA,EAAA,GAAA,IAAA,EAAA,mBAAA,QAAA,EAAA,OAAA,UAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,KAAA,GAAA,EAAA,GAAA,IAAA,WAAA,IAAA,GAAA,KAAA,MAAA,EAAA,EAAA,QAAA,MAAA,EAAA,KAAA,EAAA,OAAA,MAAA,GAAA,EAAA,CAAA,MAAA,GAAA,QAAA,IAAA,IAAA,EAAA,OAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,QAAA,GAAA,EAAA,MAAA,EAAA,OAAA,OAAA,GAAA,EAAA,MAAA,KAAA,cAAA,SAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,OAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,EAAA,QAAA,EAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAVA,IAAA,EAAA,EAAA,QAAA,aACA,EAAA,EAAA,QAAA,cASA,EAAA,WAOI,SAAA,EAAY,EAAc,GAP9B,IAAA,EAAA,EAQY,GAPA,KAAA,MAAwB,GACxB,KAAA,SAAW,GACX,KAAA,WAAa,aACb,KAAA,OAAS,EACT,KAAA,SAAW,GAGX,EAAS,CACD,IAAA,EAAA,EAAA,SAAU,EAAA,EAAA,WAAY,EAAA,EAAA,OAAQ,EAAA,EAAA,SACtC,IAAa,KAAK,SAAW,GAC7B,IAAe,KAAK,WAAa,GACjC,IAAW,KAAK,OAAS,GACzB,IAAa,KAAK,SAAW,GAE7B,IAAC,EACK,MAAA,IAAI,MAAM,kBAGd,IAAA,EAAQ,EAAK,cAAc,MAAM,IACjC,EAAQ,IAAI,MAAc,EAAM,QAAQ,KAAK,EAAA,UAAU,OAC7D,EAAM,GAAK,EAAA,UAAU,MAGhB,IADC,IACG,EAAI,EAAG,EAAI,EAAM,OAAQ,GADpB,EAEL,IAAA,IAAI,EAAI,EAAG,EAAI,EAFV,EAEsB,GAAK,EAAI,EAAM,SAAU,EACjD,GAAgB,GAAhB,KAAK,SAAgB,EAAG,CACxB,EAAM,GAAK,EAAA,UAAU,IACrB,MA5BpB,IAiCoC,IAAA,IAAA,EAAA,EAAA,EAAM,WAAS,EAAA,EAAA,QAAA,EAAA,KAAA,EAAA,EAAA,OAAE,CAAlC,IAAA,EAAA,EAAA,EAAA,MAAA,GAAC,EAAA,EAAA,GAAO,EAAA,EAAA,GACX,OAAO,KAAK,GACP,KAAA,MAAM,KAAK,IAAI,EAAA,QAAQ,GAAI,EAAA,UAAU,QAErC,KAAA,MAAM,KAAK,IAAI,EAAA,QAAQ,EAAM,EAAM,GAAQ,KAAK,SAAU,KAAK,cArCpF,MAAA,GAAA,EAAA,CAAA,MAAA,GAAA,QAAA,IAAA,IAAA,EAAA,OAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,QAAA,GAAA,EAAA,MAAA,EAAA,QAuJA,OA7GI,EAAA,UAAA,KAAA,SAAK,GA1CT,IAAA,EAAA,EAAA,EAAA,EA2Cc,EAAM,EAAO,WAAW,MAC1B,IAAC,EACK,MAAA,IAAI,MAAM,2BAGd,IAAA,EAAW,KAAK,SAAU,EAAS,KAAK,OAE1C,EAAyB,EAAX,EAAc,EAAe,EAlDvD,IAmD8B,IAAA,IAAA,EAAA,EAAA,KAAK,OAAK,EAAA,EAAA,QAAA,EAAA,KAAA,EAAA,EAAA,OAAE,CAC1B,IADG,EAAO,EAAA,iBACS,EAAA,QAAS,CACtB,IAAA,EAAO,EAAQ,WACrB,GAAgB,EAAK,MAAQ,EAC7B,EAAe,KAAK,IAAI,EAAc,EAAK,aAE3C,GAAe,EAAI,GAzDnC,MAAA,GAAA,EAAA,CAAA,MAAA,GAAA,QAAA,IAAA,IAAA,EAAA,OAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,QAAA,GAAA,EAAA,MAAA,EAAA,OA4DY,IAAA,EAAa,EACjB,GAAyC,EAAX,EAE9B,EAAO,OAAS,EAChB,EAAO,MAAQ,EAEf,EAAI,UAAY,EAAA,OAAO,MACvB,EAAI,aAAe,MAnE3B,IAqE8B,IAAA,IAAA,EAAA,EAAA,KAAK,OAAK,EAAA,EAAA,QAAA,EAAA,KAAA,EAAA,EAAA,OAAE,CAAvB,IAAA,EACH,IADG,EAAO,EAAA,OACF,MAAQ,EAAA,UAAU,MAA1B,CAKJ,EAAI,OACE,IAAA,EAAA,EAAA,KAAM,EAAA,EAAA,IAAK,EAAA,EAAA,KAAM,EAAA,EAAA,MAAO,EAAA,EAAA,OAAQ,EAAA,EAAA,MAAO,EAAA,EAAA,KAAM,EAAA,EAAA,MAE/C,GAAA,GAAQ,EAAA,UAAU,MAAO,CACnB,IAAA,EAAA,EAAA,WAAE,EAAA,EAAA,MAAoB,EAAA,EAAA,OACtB,EAAU,EAAa,EAAc,EAAG,EAAU,EAAW,EAAe,EAClF,EAAE,aAAa,EAAK,EAAQ,EAAG,EAAS,GACxC,EAAI,UAAY,EAAA,OAAO,MACvB,EAAI,SAAS,GAAa,EAAe,GAAgB,EAAG,EAAa,GAEzE,EAAE,aAAa,EAAK,EAAG,EAAS,GAC1B,IAEA,EAAS,GAAc,GADvB,EADU,IACA,IACsC,EAAG,GAAS,GAD3B,EADvB,IACkC,IAC2C,EAC7F,EAAI,UAAY,EAAA,OAAO,IACvB,EAAI,SAAS,EAAQ,EAAO,EAAS,GAErC,EAAE,aAAa,EAAK,EAAG,EAAS,GAC1B,IAAA,EAAW,GAAc,EAAc,GAAS,EAAI,EAAM,GAAW,EAAe,GAAU,EAAI,EACxG,EAAI,UAAY,EAChB,EAAI,KAAO,EAAQ,KACnB,EAAI,SAAS,EAAM,EAAU,GAE7B,GAAc,EAAQ,WAAW,MAAQ,MACtC,CACG,IAAA,EAAA,EAAA,WAAE,EAAA,EAAA,MAAgB,EAAA,EAAA,OAElB,EAAU,EAAa,EAAU,EAAG,EAAU,EAAW,EAAW,EAC1E,EAAE,aAAa,EAAK,EAAQ,EAAG,EAAS,GACxC,EAAI,UAAY,EAAA,OAAO,MACvB,EAAI,SAAS,GAAa,EAAe,GAAY,EAAG,EAAS,GAE3D,EAAW,GAAc,EAAU,GAAS,EAAI,EAAM,GAAW,EAAe,GAAU,EAAI,EACpG,EAAE,aAAa,GAAM,EAAG,EAAS,GACjC,EAAI,UAAY,EAChB,EAAI,KAAO,EAAQ,KACnB,EAAI,SAAS,EAAM,EAAU,GAE7B,GAAc,EAAQ,WAAW,MAAQ,EAG7C,EAAI,eA7CA,GAAc,EAAI,GAvElC,MAAA,GAAA,EAAA,CAAA,MAAA,GAAA,QAAA,IAAA,IAAA,EAAA,OAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,QAAA,GAAA,EAAA,MAAA,EAAA,OA2Ha,IAJC,IAAA,EAAY,EAAI,aAAa,EAAG,EAAG,EAAa,GAChD,EAAe,EAAI,gBAAgB,EAAa,GAElC,EAAQ,KAAK,MAAM,GAC9B,EAAI,EAAO,EAAI,EAAU,OAAS,IAAS,EAC3C,IAAA,IAAI,EAAI,EAAO,EAAI,EAAU,MAAQ,IAAS,EAAG,CAC5C,IAAA,EAAQ,EAAI,EAAU,MAAQ,EAAQ,EAAJ,EACpC,GAAC,EAAU,KAAK,EAAQ,GAKvB,IADC,IAAA,EAAI,EAAU,KAAK,EAAQ,GACxB,EAAI,EATJ,EASmB,EAAG,EAAI,EAT1B,IAS0C,EAC1C,IAAA,IAAI,EAAI,EAVR,EAUuB,EAAG,EAAI,EAV9B,IAU8C,EAAG,CAC5C,IAAA,EAAW,EAAI,EAAU,MAAQ,EAAQ,EAAJ,EAC3C,EAAa,KAAK,GAAY,IAC9B,EAAa,KAAK,EAAW,GAAK,IAClC,EAAa,KAAK,EAAW,GAAK,IAClC,EAAa,KAAK,EAAW,IAAM,EAAI,GAMjD,IAAA,EAAA,EAAA,oBAAA,EAAA,GAAE,EAAA,EAAA,OAAsB,EAAA,QACpB,aAAa,EAAc,EAAG,GAExC,EAAI,OACJ,EAAI,yBAA2B,mBAC/B,EAAI,UAAU,EAAc,EAAG,GAC/B,EAAI,WAEZ,EAvJA,GAAA,QAAA,QAAA;;ACRA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFA,IAAA,EAAA,EAAA,QAAA,sBAEA,QAAA,QAAe,WACL,IAAA,EAAiC,SAAS,eAAe,gBACzD,EAAkC,SAAS,eAAe,iBAC1D,EAAoC,SAAS,eAAe,mBAE5D,EAA6B,SAAS,eAAe,YACrD,EAA+B,SAAS,eAAe,cACvD,EAA4B,SAAS,eAAe,UAE1D,EAAS,iBAAiB,QAAS,WACzB,IAAA,GAAS,EAAa,OAAS,IAAI,OACrC,GAAC,EAAD,CAGE,IAAA,EAAW,KAAK,IAAI,KAAK,KAAK,EAAc,OAAS,KACrD,EAAa,EAAgB,OAAS,aAChC,IAAI,EAAA,QAAQ,EAAO,CAC3B,SAAQ,EACR,WAAU,IAEV,KAAK,MAGb,EAAW,iBAAiB,QAAS,WAC3B,IAAA,EAAW,EAAO,UAAU,aAAa,QAAQ,YAAa,sBAC9D,EAAI,SAAS,cAAc,KACjC,EAAE,KAAO,EACT,EAAE,SAAc,EAAa,MAAK,OAClC,EAAE,OAAS,QACX,EAAE;;AC7BV,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFA,IAAA,EAAA,EAAA,QAAA,UAEA,OAAO,OAAS,EAAA","file":"src.0e8f27a1.map","sourceRoot":"../src","sourcesContent":["export function getCanvasAndContext(width: number, height: number) {\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n\n    const context = canvas.getContext('2d');\n    if (!context) {\n        throw new Error('Failed to create canvas');\n    }\n    return { canvas, context };\n}\n\nexport function getCharSize(char: string, fontSize: number, fontFamily = 'sans-serif', fontWeight = 'normal') {\n    const { context: ctx } = getCanvasAndContext(fontSize, fontSize);\n\n    const font = `${fontWeight} ${fontSize}px ${fontFamily}`;\n    ctx.font = font;\n    ctx.textBaseline = 'top';\n    ctx.fillText(char, 0, 0);\n\n    let count = 0;\n    let left = -1, right = fontSize, top = -1, bottom = fontSize;\n    const imageData = ctx.getImageData(0, 0, fontSize, fontSize).data;\n\n    // 遍历像素找包围盒\n    for (let i = 0; i < fontSize && count < 4; ++i) {\n        for (let j = 0; j < fontSize && count < 4; ++j) {\n            const topIndex = (i * fontSize + j) * 4;\n            const leftIndex = (i + j * fontSize) * 4;\n            if (top < 0 && imageData[topIndex + 3]) {\n                top = i;\n                ++count;\n            }\n            if (left < 0 && imageData[leftIndex + 3]) {\n                left = i;\n                ++count;\n            }\n            if (bottom == fontSize && imageData[imageData.length - topIndex - 1]) {\n                bottom = fontSize - i;\n                ++count;\n            }\n            if (imageData[imageData.length - leftIndex - 1]) {\n                right = fontSize - i;\n                ++count;\n            }\n        }\n    }\n    \n    const width = right - left, height = bottom - top;\n    return {\n        top,\n        left,\n        width,\n        height\n    };\n}\n\nexport function randomOp() {\n    return Math.floor(Math.random() * 10) % 2 ? 1 : -1;\n}\n\nexport function canvasRotate(context: CanvasRenderingContext2D, angle: number, x: number, y: number) {\n    context.translate(x, y);\n    context.rotate(Math.PI * angle / 180);\n    context.translate(-x, -y);\n}\n","import * as _ from '../utils';\n\nconst MAX_ANGLE = 10;\n\nexport enum COLORS {\n    RED = '#E5191C',\n    WHITE = '#FDFDFD',\n    BLACK = '#0F0F0F',\n};\n\nexport enum CHAR_MODE {\n    FIRST = 1,\n    WHITE = 2,\n    RED = 3,\n    SPACE = 4,\n};\n\nexport default class BoxChar {\n    static BorderScale = 1.4;\n    static BackgroundScale = 1.2;\n\n    char = '';\n    fontFamily = '';\n    fontSize = 0;\n    width = 0;\n    height = 0;\n    left = 0;\n    top = 0;\n    angle = 0;\n    scale = 0;\n    mode = CHAR_MODE.WHITE;\n    color = COLORS.WHITE;\n\n    constructor(char: string, mode: CHAR_MODE, fontSize = 60, fontFamily = 'sans-serif') {\n        this.char = char;\n        this.mode = mode;\n        this.fontFamily = fontFamily;\n\n        if (mode == CHAR_MODE.SPACE) {\n            return;\n        }\n        \n        const angle = -(Math.round(Math.random() * 10) % MAX_ANGLE);\n        if (mode == CHAR_MODE.FIRST) {\n            this.scale = 1.1;\n            this.angle = angle;\n        } else {\n            this.scale = 1 - Math.floor(Math.random() * 10) % 3 / 10;\n            this.angle = angle * _.randomOp();\n        }\n        this.fontSize = fontSize * this.scale;\n        \n        if (mode == CHAR_MODE.RED) {\n            this.color = COLORS.RED;\n        }\n        \n        const { width, height, top, left } = _.getCharSize(char, this.fontSize, this.fontFamily, 'bold');\n        this.width = width;\n        this.height = height;\n        this.top = top;\n        this.left = left;\n    }\n\n    get font() {\n        return `bold ${this.fontSize}px ${this.fontFamily}`;\n    }\n\n    get rotateSize() {\n        const angle = this.angle * Math.PI / 180;\n        const sin = Math.abs(Math.sin(angle)), cos = Math.abs(Math.cos(angle));\n        const width = Math.ceil(this.width * cos) + Math.ceil(this.height * sin);\n        const height = Math.ceil(this.height * cos) + Math.ceil(this.width * sin);\n        return {\n            width,\n            height\n        }\n    }\n\n    get outterSize() {\n        const { width, height } = this.rotateSize;\n        const scale = this.mode == CHAR_MODE.FIRST ? BoxChar.BorderScale : BoxChar.BackgroundScale;\n        return {\n            width: width * scale,\n            height: height * scale\n        };\n    }\n}\n","import * as _ from '../utils';\nimport BoxChar, { CHAR_MODE, COLORS } from './BoxChar';\n\ninterface BoxTextOptions {\n    fontSize?: number,\n    fontFamily?: string,\n    gutter?: number,\n    pendding?: number,\n}\n\nexport default class BoxText {\n    private chars: Array<BoxChar> = [];\n    private fontSize = 60;\n    private fontFamily = 'sans-serif';\n    private gutter = 5;\n    private pendding = 30;\n\n    constructor(text: string, options?: BoxTextOptions) {\n        if (options) {\n            const { fontSize, fontFamily, gutter, pendding } = options;\n            fontSize && (this.fontSize = fontSize);\n            fontFamily && (this.fontFamily = fontFamily);\n            gutter && (this.gutter = gutter);\n            pendding && (this.pendding = pendding);\n        }\n        if (!text) {\n            throw new Error('Must set text.');\n        }\n\n        const chars = text.toUpperCase().split('');\n        const modes = new Array<number>(chars.length).fill(CHAR_MODE.WHITE);\n        modes[0] = CHAR_MODE.FIRST;\n        // 随机选择标红的字，一定范围内只允许出现一次\n        const range = 5;\n        for (let i = 1; i < chars.length; i += range) {\n            for (let j = i; j < i + range - 1 && j < chars.length; ++j) {\n                if (Math.random() * 10 > 6) {\n                    modes[j] = CHAR_MODE.RED;\n                    break;\n                }\n            }\n        }\n\n        for (const [index, char] of chars.entries()) {\n            if (/^\\s$/.test(char)) {\n                this.chars.push(new BoxChar('', CHAR_MODE.SPACE));\n            } else {\n                this.chars.push(new BoxChar(char, modes[index], this.fontSize, this.fontFamily));\n            }\n        }\n    }\n\n    draw(canvas: HTMLCanvasElement) {\n        const ctx = canvas.getContext('2d');\n        if (!ctx) {\n            throw new Error('Failed to create canvas');\n        }\n\n        const pendding = this.pendding, gutter = this.gutter;\n        \n        let canvasWidth = pendding * 2, canvasHeight = 0;\n        for (const boxChar of this.chars) {\n            if (boxChar instanceof BoxChar) {\n                const size = boxChar.outterSize;\n                canvasWidth += (size.width + gutter);\n                canvasHeight = Math.max(canvasHeight, size.height);\n            } else {\n                canvasWidth += 2 * gutter;\n            }\n        }\n        let drawOffset = pendding;\n        canvasHeight = canvasHeight + pendding * 2;\n\n        canvas.height = canvasHeight;\n        canvas.width = canvasWidth;\n\n        ctx.fillStyle = COLORS.BLACK;\n        ctx.textBaseline = 'top';\n\n        for (const boxChar of this.chars) {\n            if (boxChar.mode == CHAR_MODE.SPACE) {\n                drawOffset += 2 * gutter;\n                continue;\n            }\n            \n            ctx.save();\n            let { char, top, left, width, height, angle, mode, color } = boxChar;\n\n            if (mode == CHAR_MODE.FIRST) {\n                const { width: borderWidth, height: borderHeight } = boxChar.outterSize;\n                const rotateX = drawOffset + borderWidth / 2, rotateY = pendding + borderHeight / 2;\n                _.canvasRotate(ctx, angle - 5, rotateX, rotateY);\n                ctx.fillStyle = COLORS.BLACK;\n                ctx.fillRect(drawOffset, (canvasHeight - borderHeight) / 2, borderWidth, borderHeight);\n\n                _.canvasRotate(ctx, 3, rotateX, rotateY);\n                const bgScale = 0.85;\n                const bgWidth = borderWidth * bgScale, bgHeight = borderHeight * bgScale;\n                const bgLeft = drawOffset + (borderWidth - bgWidth) / 2, bgTop = (canvasHeight - bgHeight) / 2;\n                ctx.fillStyle = COLORS.RED;\n                ctx.fillRect(bgLeft, bgTop, bgWidth, bgHeight);\n\n                _.canvasRotate(ctx, 2, rotateX, rotateY);\n                const textLeft = drawOffset + (borderWidth - width) / 2 - left, textTop = (canvasHeight - height) / 2 - top;\n                ctx.fillStyle = color;\n                ctx.font = boxChar.font;\n                ctx.fillText(char, textLeft, textTop);\n\n                drawOffset += boxChar.outterSize.width + gutter;\n            } else {\n                const { width: bgWidth, height: bgHeight } = boxChar.outterSize;\n\n                const rotateX = drawOffset + bgWidth / 2, rotateY = pendding + bgHeight / 2;\n                _.canvasRotate(ctx, angle + 1, rotateX, rotateY);\n                ctx.fillStyle = COLORS.BLACK;\n                ctx.fillRect(drawOffset, (canvasHeight - bgHeight) / 2, bgWidth, bgHeight);\n\n                const textLeft = drawOffset + (bgWidth - width) / 2 - left, textTop = (canvasHeight - height) / 2 - top;\n                _.canvasRotate(ctx, -1, rotateX, rotateY);\n                ctx.fillStyle = color;\n                ctx.font = boxChar.font;\n                ctx.fillText(char, textLeft, textTop);\n\n                drawOffset += boxChar.outterSize.width + gutter;\n            }\n\n            ctx.restore();\n        }\n\n        const imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\n        const newImageData = ctx.createImageData(canvasWidth, canvasHeight);\n\n        const coreSize = 6, start = Math.floor(coreSize / 2);\n        for (let i = start; i < imageData.height - start; ++i) {\n            for (let j = start; j < imageData.width - start; ++j) {\n                const index = i * imageData.width * 4 + j * 4;\n                if (!imageData.data[index + 3]) {\n                    continue;\n                }\n\n                const a = imageData.data[index + 3];\n                for (let x = i - coreSize + 1; x < i + coreSize; ++x) {\n                    for (let y = j - coreSize + 1; y < j + coreSize; ++y) {\n                        const newIndex = x * imageData.width * 4 + y * 4;\n                        newImageData.data[newIndex] = 255;\n                        newImageData.data[newIndex + 1] = 255;\n                        newImageData.data[newIndex + 2] = 255;\n                        newImageData.data[newIndex + 3] += a / 4;\n                    }\n                }\n            }\n        }\n\n        const { canvas: borderCanvas, context: borderCtx } = _.getCanvasAndContext(canvasWidth, canvasHeight);\n        borderCtx.putImageData(newImageData, 0, 0);\n\n        ctx.save();\n        ctx.globalCompositeOperation = 'destination-over';\n        ctx.drawImage(borderCanvas, 0, 0);\n        ctx.restore();\n    }\n}\n","import BoxText from './lib/box/BoxText';\n\nexport default () => {\n    const contentInput = <HTMLInputElement>document.getElementById('contentInput');\n    const fontSizeInput = <HTMLInputElement>document.getElementById('fontSizeInput');\n    const fontFamilyInput = <HTMLInputElement>document.getElementById('fontFamilyInput');\n\n    const goButton = <HTMLInputElement>document.getElementById('goButton');\n    const saveButton = <HTMLInputElement>document.getElementById('saveButton');\n    const canvas = <HTMLCanvasElement>document.getElementById('canvas');\n\n    goButton.addEventListener('click', () => {\n        const value = (contentInput.value || '').trim();\n        if (!value) {\n            return;\n        }\n        const fontSize = Math.min(Math.abs(+fontSizeInput.value || 60));\n        const fontFamily = fontFamilyInput.value || 'sans-serif';\n        const box = new BoxText(value, {\n            fontSize,\n            fontFamily\n        });\n        box.draw(canvas);\n    });\n\n    saveButton.addEventListener('click', () => {\n        const imageURL = canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream');\n        const a = document.createElement('a');\n        a.href = imageURL;\n        a.download = `${contentInput.value}.png`;\n        a.target = 'blank';\n        a.click();\n    });\n};\n","import onload from './web';\n\nwindow.onload = onload;\n"]}